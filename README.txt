The application was built primarily with the Java programming language.
The Front End (FE) is built with a combination of Spring Boot, Thymeleaf, jQuery and JavaScript.
The Backend (BE) is built with Spring Boot and uses a MariaDB/MySQL database.

1. Steps to setup the MariaDB/MySQL database:
    Refer to the section 1 of the README file in the backend module(projectmanager project)

2. Steps to run the backend module:
	Refer to the section 2 of the README file in the backend module(projectmanager project)

3. Steps to run the frontend module:
	a: The frontend module has been configured to run on port 8081, however this can be modified in the application.yml file located in the {project-home}/src/main/resources folder
	b: The application can be installed as a service or deployed in a container,
	however for the purpose of this assessment,
    Run the project from the main class ProductsManagerUIApplication.java in your IDE
    OR
    Run in cmd using command "java -jar productsmanagerui-0.0.1-SNAPSHOT.jar".
	c: The application will now be accessible on: http://localhost:8081
	d: test user credentials: 
		email: johnsnow@gmail.com
		password: password123

	NOTE: Changing the port for the backend module as described in step 2:a above will require updating the backend:port parameter in the application.yml file located in the FE folder
		The logs are written in FE/logs/product-managerui.log

4. Other Design considerations AS-IS(What has been implemented) and TO-BE(What would have been done differently):
	a: Session management: 
		AS-IS: With the current implementation, a session token is generated by the BE, saved to the database and sent as a response after a successful login. 
        The FE is expected to pass the session token as a header parameter for Subsequent API calls. This is used to validate the users session.
		TO-BE: Users sessions will be stored in Redis for better session management.
   
	b: User management:
		The BE module exposes an API for user registration. A feature would be developed in the FE to create users and assign roles to the users.
	
	c: Micro services Architecture:
		The system currently has separate components for the FE and BE. However, the BE can be split into different microservices, i.e:
		- User management service
		- Product/Inventory management service
		- Order management/Payment module: to handle real time purchases and update Product/Inventory management service
		- API gateway: to accept all incoming requests and route to the appropriate microservice.

	d: Deployment:
		The system will be deployed in a Docker Container
   
	e: User Stories implemented:
	   - Ability to see all products
	   - Ability to sort the products by name by clicking on the datatable header
	   - Ability to filter by category by selecting a category on the search interface
	   - Ability to page results (5, 10 and 20)
	   - Ability to add a new product
	   - Ability to delete a product
	   - Ability to register a new user(BE only)
	   - Ability to fetch a product by Id
	   - Ability to create a new category(BE only)